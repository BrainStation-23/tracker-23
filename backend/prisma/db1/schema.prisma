// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev
// npx prisma migrate reset --force
// npx prisma studio
//  binaryTargets = ["native", "debian-openssl-1.1.x"]

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id        Int      @id @default(autoincrement())
  name      String
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userWorkspaces UserWorkspace[]
  tasks          Task[]
  projects       Project[]
  integrations   Integration[]
  notifications  Notification[]
  // workspaceInvitations WorkspaceInvitation[]

  // Creator          User              @relation(fields: [creatorUserId], references: [id])
  creatorUserId    Int
  tempIntegration  TempIntegration[]
  userIntegrations UserIntegration[]

  settings Settings?
  User     User[]
}

model UserWorkspace {
  id           Int                 @id @default(autoincrement())
  role         Role                @default(USER) // Admin, User, etc.
  valid        Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  status       UserWorkspaceStatus // active , invited , inactive, deleted
  invitationId String?
  invitedAt    DateTime?
  respondedAt  DateTime?

  callSync        callSync[]
  task            Task[]
  userIntegration UserIntegration[]
  sessions        Session[]

  user          User        @relation("User", fields: [userId], references: [id])
  userId        Int
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   Int
  inviter       User?       @relation("InviterUser", fields: [inviterUserId], references: [id])
  inviterUserId Int?
  designation   Designation @default(DEVELOPER)

  // invitationsSent     WorkspaceInvitation[] @relation("InviterUser")
  // invitationsReceived WorkspaceInvitation[] @relation("InvitedUser")
  @@unique([userId, workspaceId], name: "userWorkspaceIdentifier")
}

// model WorkspaceInvitation {
//   id           Int               @id @default(autoincrement())
//   role         Role              @default(USER) // Admin, user
//   status       InvitationStatus? //pending accepted, rejected
//   invitedEmail String

//   Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
//   workspaceId Int

//   inviter       UserWorkspace  @relation("InviterUser", fields: [inviterUserId], references: [id])
//   inviterUserId Int
//   invitedUser   UserWorkspace? @relation("InvitedUser", fields: [invitedUserId], references: [id])
//   invitedUserId Int?
// }

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  hash                 String?
  firstName            String?
  lastName             String?
  activeWorkspace      Workspace?      @relation(fields: [activeWorkspaceId], references: [id])
  activeWorkspaceId    Int?
  picture              String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  passwordResetToken   String?
  passwordResetExpires DateTime?
  approved            Boolean?        @default(false)
  userWorkspaces       UserWorkspace[] @relation("User")
  // ownedWorkspaces     Workspace[]
  // tasks               Task[]
  notifications        Notification[]
  // UserIntegrations    UserIntegration[]
  invitationsSent      UserWorkspace[] @relation("InviterUser")
  // invitationsSent     WorkspaceInvitation[] @relation("InviterUser")
  // invitationsReceived WorkspaceInvitation[] @relation("InvitedUser")
}

model Notification {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  seen        Boolean  @default(false)
  cleared     Boolean  @default(false)
  author      String
  title       String
  description String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
}

model Integration {
  id               Int               @id @default(autoincrement())
  siteId           String?
  type             IntegrationType
  site             String?
  Projects         Project[]
  userIntegrations UserIntegration[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int

  @@unique([siteId, workspaceId], name: "IntegrationIdentifier")
  @@unique([siteId, id], name: "IntegrationIdentifier2")
}

model UserIntegration {
  id            Int     @id @default(autoincrement())
  accessToken   String?
  refreshToken  String?
  jiraAccountId String?

  // user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId      Int

  userWorkspace   UserWorkspace @relation(fields: [userWorkspaceId], references: [id])
  userWorkspaceId Int

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int

  integration     Integration? @relation(fields: [integrationId, siteId], references: [id, siteId], onDelete: Cascade)
  integrationId   Int?
  siteId          String?
  expiration_time DateTime     @default("2023-10-16T00:00:00Z")

  @@unique([integrationId, userWorkspaceId], name: "UserIntegrationIdentifier")
}

model TempIntegration {
  id              Int             @id @default(autoincrement())
  siteId          String
  type            IntegrationType
  accessToken     String
  refreshToken    String
  site            String?
  jiraAccountId   String?
  userWorkspaceId Int

  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId     Int
  expiration_time DateTime

  @@unique([siteId, userWorkspaceId], name: "TempIntegrationIdentifier")
}

model Project {
  id          Int              @id @default(autoincrement())
  projectId   Int?
  projectName String?
  projectKey  String?
  source      String
  integrated  Boolean          @default(false)
  statuses    StatusDetail[]
  tasks       Task[]
  sprints     Sprint[]
  priorities  PriorityScheme[]

  integration   Integration? @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId Int?
  workspace     Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   Int

  @@unique([projectName, source, workspaceId], name: "ProjectIdentifier")
}

model StatusDetail {
  id                 Int     @id @default(autoincrement())
  statusId           String?
  name               String
  untranslatedName   String?
  statusCategoryId   String?
  statusCategoryName String
  transitionId       String?

  projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@unique([name, projectId], name: "StatusDetailIdentifier")
}

model Task {
  id                   Int             @id @default(autoincrement())
  title                String
  description          String?
  assigneeId           String?
  projectName          String?
  estimation           Float?
  status               String?         @default("To Do")
  statusCategoryName   String?         @default("TO_DO")
  due                  DateTime?
  priority             String?         @default("MEDIUM")
  priorityCategoryName String?         @default("MEDIUM")
  labels               Labels[]        @default([])
  source               IntegrationType @default(TRACKER23)
  integratedTaskId     Int?
  url                  String?
  key                  String?
  pinned               Boolean?        @default(false)
  jiraUpdatedAt        DateTime?
  sessions             Session[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now())

  userWorkspace   UserWorkspace? @relation(fields: [userWorkspaceId], references: [id])
  userWorkspaceId Int?
  project         Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       Int?
  workspace       Workspace?     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     Int?
  // User            User?          @relation(fields: [userId], references: [id])
  // userId          Int?

  parentTask   Task?  @relation("childTask", fields: [parentTaskId], references: [id])
  parentTaskId Int?
  childTask    Task[] @relation("childTask")

  @@unique([workspaceId, projectId, integratedTaskId], name: "TaskIdentifier")
}

model Session {
  id               Int            @id @default(autoincrement())
  startTime        DateTime       @default(now())
  endTime          DateTime?
  status           SessionStatus  @default(STARTED)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  authorId         String?
  integratedTaskId Int?
  worklogId        Int?
  userWorkspace    UserWorkspace? @relation(fields: [userWorkspaceId], references: [id])
  userWorkspaceId  Int?

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
}

model callSync {
  id        Int      @id @default(autoincrement())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserWorkspace   UserWorkspace @relation(fields: [userWorkspaceId], references: [id], onDelete: Cascade)
  userWorkspaceId Int
}

model webhook {
  id             Int      @id @default(autoincrement())
  projectKey     String[]
  webhookId      Int
  siteId         String
  expirationDate DateTime

  @@unique([webhookId, siteId], name: "webhookIdentifier")
}

model Sprint {
  id           Int          @id @default(autoincrement())
  jiraSprintId Int
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    Int
  sprintTask   SprintTask[]
  state        String
  name         String
  startDate    DateTime?
  endDate      DateTime?
  completeDate DateTime?
}

model SprintTask {
  id       Int    @id @default(autoincrement())
  sprint   Sprint @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId Int
  taskId   Int

  @@unique([sprintId, taskId], name: "sprintTaskIdentifier")
}

model Settings {
  id         Int    @id @default(autoincrement())
  syncTime   Int    @default(6)
  timeFormat String @default("Day")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int       @unique
}

model PriorityScheme {
  id                   Int     @id @default(autoincrement())
  priorityId           String?
  name                 String
  priorityCategoryName String
  iconUrl              String?
  color                String?

  projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@unique([name, projectId], name: "PrioritySchemeIdentifier")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Labels {
  BUG
  FEATURE
  REFACTOR
}

enum SessionStatus {
  STARTED
  STOPPED
}

enum IntegrationType {
  JIRA
  TRACKER23
}

enum Role {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserWorkspaceStatus {
  ACTIVE
  INACTIVE
  INVITED
  DELETED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}

enum Designation {
  DEVELOPER
  MANAGER
}
