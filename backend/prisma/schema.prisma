// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev
// npx prisma migrate reset --force
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userWorkspaces       UserWorkspace[]
  tasks                Task[]
  projects             Project[]
  integrations         Integration[]
  notifications        Notification[]
  workspaceInvitations WorkspaceInvitation[]

  // Creator          User              @relation(fields: [creatorUserId], references: [id])
  creatorUserId    Int
  TempIntegration  TempIntegration[]
  UserIntegrations UserIntegration[]
}

model UserWorkspace {
  id        Int      @id @default(autoincrement())
  role      Role     @default(USER) // Admin, User, etc.
  valid Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
}

model WorkspaceInvitation {
  id           Int               @id @default(autoincrement())
  role         Role              @default(USER) // Admin, user
  status       InvitationStatus? //pending accepted, rejected
  invitedEmail String

  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int

  inviter       User  @relation("InviterUser", fields: [inviterUserId], references: [id])
  inviterUserId Int
  invitedUser   User? @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId Int?
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  hash      String?
  firstName String?
  lastName  String?
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userWorkspaces      UserWorkspace[]
  // ownedWorkspaces     Workspace[]
  tasks               Task[]
  notifications       Notification[]
  invitationsSent     WorkspaceInvitation[] @relation("InviterUser")
  invitationsReceived WorkspaceInvitation[] @relation("InvitedUser")
  UserIntegrations    UserIntegration[]
}

model Notification {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  seen        Boolean  @default(false)
  author      String
  title       String
  description String

  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
}

model Integration {
  id               Int               @id @default(autoincrement())
  siteId           String?
  type             IntegrationType
  site             String?
  Projects         Project[]
  userIntegrations UserIntegration[]

  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  @@unique([siteId, workspaceId], name: "integrationIdentifier")
  @@unique([siteId, id], name: "integrationIdentifier2")
}

model UserIntegration {
  id            Int     @id @default(autoincrement())
  accessToken   String?
  refreshToken  String?
  jiraAccountId String?

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  // @@unique([siteId, userId], name: "integrationIdentifier")
  Integration   Integration? @relation(fields: [integrationId, siteId], references: [id, siteId])
  integrationId Int?
  siteId        String?
}

model TempIntegration {
  id            Int             @id @default(autoincrement())
  siteId        String
  type          IntegrationType
  accessToken   String
  refreshToken  String
  site          String?
  jiraAccountId String?
  userId        Int

  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  @@unique([siteId, userId], name: "tempIntegrationIdentifier")
}

model Project {
  id          Int            @id @default(autoincrement())
  projectId   String
  projectName String?
  projectKey  String?
  source      String
  integrated  Boolean        @default(false)
  statuses    StatusDetail[]
  tasks       Task[]

  integration   Integration? @relation(fields: [integrationID], references: [id], onDelete: Cascade)
  integrationID Int?
  Workspace     Workspace?   @relation(fields: [workspaceId], references: [id])
  workspaceId   Int?
}

model StatusDetail {
  id                 Int     @id @default(autoincrement())
  statusId           String
  name               String
  untranslatedName   String
  statusCategoryId   String
  statusCategoryName String
  transitionId       String?

  transitionStatus Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        Int

  @@unique([name, projectId], name: "tempStatusDetailIdentifier")
}

model Task {
  id                 Int             @id @default(autoincrement())
  title              String
  description        String?
  assigneeId         String?
  projectName        String?
  estimation         Decimal?        @db.Decimal(5, 2)
  status             String?         @default("To Do")
  statusCategoryName String?         @default("TO_DO")
  due                DateTime?
  priority           String?         @default("Medium")
  labels             Labels[]        @default([])
  source             IntegrationType @default(TRACKER23)
  integratedTaskId   Int?
  url                String?
  pinned             Boolean?        @default(false)

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int?
}

model Session {
  id               Int           @id @default(autoincrement())
  startTime        DateTime      @default(now())
  endTime          DateTime?
  status           SessionStatus @default(STARTED)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  authorId         String?
  integratedTaskId Int?
  worklogId        Int?

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
}


model callSync {
  id        Int      @id @default(autoincrement())
  status    String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model webhook {
  id             Int      @id @default(autoincrement())
  projectKey     String[]
  webhookId      Int
  siteUrl        String
  expirationDate DateTime

  @@unique([webhookId, siteUrl], name: "webhookIdentifier")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Labels {
  BUG
  FEATURE
  REFACTOR
}

enum SessionStatus {
  STARTED
  STOPPED
}

enum IntegrationType {
  JIRA
  TRACKER23
}

enum Role {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
